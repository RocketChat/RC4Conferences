# Group Microlocations
Data related to all the microlocations for the various sessions of the event.

| Parameter | Description | Type | Required |
|:----------|-------------|------|----------|
| `name`  | Name of the microlocation| string | **yes** |
| `latitude` |  Latitude of the microlocation | float | - |
| `longitude` |  Longitude of the microlocation | float | - |
| `floor` | Floor of the microlocation | integer | - |
| `room` | Room of the microlocation | string | - |

## Microlocation Collection [/v1/microlocations{?page%5bsize%5d,page%5bnumber%5d,sort,filter}]
+ Parameters
    + page%5bsize%5d (optional, integer, `10`) - Maximum number of resources in a single paginated response.
    + page%5bnumber%5d (optional, integer, `2`) - Page number to fetched for the paginated response.
    + sort (optional, string, `floor`) - Sort the resources according to the given attribute in ascending order. Append '-' to sort in descending order.
    + filter (optional, string, `[]`) - Filter according to the flask-rest-jsonapi filtering system. Please refer: http://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html for more.

### Create Microlocation [POST]
Create a new microlocation using an event_id.

+ Request (application/vnd.api+json)

    + Headers

            Authorization: JWT <Auth Key>

    + Body

            {
              "data": {
                 "relationships":{
                  "event":{
                    "data":{
                      "type":"event",
                      "id":"1"
                    }
                  }
                },
                "attributes": {
                  "name": "microlocation-name",
                  "latitude": "45.00",
                  "longitude": "45.00",
                  "floor": "2",
                  "room": "room1"
                },
                "type": "microlocation"
              }
            }


+ Response 201 (application/vnd.api+json)

        {
          "data": {
            "relationships": {
              "event": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/event",
                  "related": "/v1/microlocations/1/event"
                }
              },
              "sessions": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/sessions",
                  "related": "/v1/microlocations/1/sessions"
                }
              }
            },
            "attributes": {
              "name": "microlocation-name",
              "latitude": "45.00",
              "longitude": "45.00",
              "floor": "2",
              "deleted-at": null,
              "room": "room1"
            },
            "type": "microlocation",
            "id": "1",
            "links": {
              "self": "/v1/microlocations/1"
            }
          },
          "jsonapi": {
            "version": "1.0"
          },
          "links": {
            "self": "/v1/microlocations/1"
          }
        }


## Microlocation Details [/v1/microlocations/{microlocation_id}]
+ Parameters
    + microlocation_id: 1 (integer) - ID of the ticket in the form of an integer

### Microlocation Details [GET]
Get a single microlocation.


+ Request

    + Headers

            Accept: application/vnd.api+json

            Authorization: JWT <Auth Key>

+ Response 200 (application/vnd.api+json)

        {
          "data": {
            "relationships": {
              "event": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/event",
                  "related": "/v1/microlocations/1/event"
                }
              },
              "sessions": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/sessions",
                  "related": "/v1/microlocations/1/sessions"
                }
              }
            },
            "attributes": {
              "name": "microlocation-name",
              "latitude": "45.00",
              "longitude": "45.00",
              "floor": "2",
              "deleted-at": null,
              "room": "room1"
            },
            "type": "microlocation",
            "id": "2",
            "links": {
              "self": "/v1/microlocations/1"
            }
          },
          "jsonapi": {
            "version": "1.0"
          },
          "links": {
            "self": "/v1/microlocations/1"
          }
        }


### Update Microlocation [PATCH]
Update a single microlocation by `id`.

+ `id` (integer) - ID of the record to update **(required)**

+ Request (application/vnd.api+json)

    + Headers

            Authorization: JWT <Auth Key>

    + Body

            {
              "data": {
                "attributes": {
                  "name": "microlocation-name1",
                  "latitude": "46.00",
                  "longitude": "46.00",
                  "floor": "21",
                  "room": "room11"
                },
                "type": "microlocation",
                "id": "1"
              }
            }

+ Response 200 (application/vnd.api+json)

        {
          "data": {
            "relationships": {
              "event": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/event",
                  "related": "/v1/microlocations/1/event"
                }
              },
              "sessions": {
                "links": {
                  "self": "/v1/microlocations/1/relationships/sessions",
                  "related": "/v1/microlocations/1/sessions"
                }
              }
            },
            "attributes": {
              "name": "microlocation-name1",
              "latitude": "46.00",
              "longitude": "46.00",
              "floor": "21",
              "deleted-at": null,
              "room": "room11"
            },
            "type": "microlocation",
            "id": "1",
            "links": {
              "self": "/v1/microlocations/1"
            }
          },
          "jsonapi": {
            "version": "1.0"
          },
          "links": {
            "self": "/v1/microlocations/1"
          }
        }

### Delete Microlocation [DELETE]
Delete a single microlocation.

+ Request

    + Headers

            Accept: application/vnd.api+json

            Authorization: JWT <Auth Key>

+ Response 200 (application/vnd.api+json)

        {
          "meta": {
            "message": "Object successfully deleted"
          },
          "jsonapi": {
            "version": "1.0"
          }
        }


## Microlocations under an Event [/v1/events/{event_identifier}/microlocations{?page%5bsize%5d,page%5bnumber%5d,sort,filter}]
+ Parameters
    + event_identifier: 1 (string) - identifier or event id of the event. (b8324ae2 is an example of identifier)
    + page%5bsize%5d (optional, integer, `10`) - Maximum number of resources in a single paginated response.
    + page%5bnumber%5d (optional, integer, `2`) - Page number to fetched for the paginated response.
    + sort (optional, string, `floor`) - Sort the resources according to the given attribute in ascending order. Append '-' to sort in descending order.
    + filter (optional, string, `[]`) - Filter according to the flask-rest-jsonapi filtering system. Please refer: http://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html for more.

### Get List of Microlocations under an Event [GET]
Get a single microlocation.


+ Request

    + Headers

            Accept: application/vnd.api+json

            Authorization: JWT <Auth Key>

+ Response 200 (application/vnd.api+json)

        {
            "meta": {
                "count": 1
            },
            "data": [
                {
                    "relationships": {
                        "event": {
                            "links": {
                                "self": "/v1/microlocations/1/relationships/event",
                                "related": "/v1/microlocations/1/event"
                            }
                        },
                        "sessions": {
                            "links": {
                                "self": "/v1/microlocations/1/relationships/sessions",
                                "related": "/v1/microlocations/1/sessions"
                            }
                        }
                    },
                    "attributes": {
                        "latitude": 45,
                        "room": "room1",
                        "name": "microlocation-name",
                        "longitude": 45,
                        "deleted-at": null,
                        "floor": 2
                    },
                    "type": "microlocation",
                    "id": "1",
                    "links": {
                        "self": "/v1/microlocations/1"
                    }
                }
            ],
            "jsonapi": {
                "version": "1.0"
            },
            "links": {
                "self": "/v1/events/1/microlocations"
            }
        }


## Microlocation Details of a Session [/v1/sessions/{session_id}/microlocation]
+ Parameters
    + session_id: 1 (integer) - ID of the session in the form of an integer

### Get Microlocation Details of a Session [GET]
Get a single microlocation.


+ Request

    + Headers

            Accept: application/vnd.api+json

            Authorization: JWT <Auth Key>

+ Response 200 (application/vnd.api+json)

        {
            "data": {
                "relationships": {
                    "event": {
                        "links": {
                            "self": "/v1/microlocations/1/relationships/event",
                            "related": "/v1/microlocations/1/event"
                        }
                    },
                    "sessions": {
                        "links": {
                            "self": "/v1/microlocations/1/relationships/sessions",
                            "related": "/v1/microlocations/1/sessions"
                        }
                    }
                },
                "attributes": {
                    "latitude": 45,
                    "room": "room1",
                    "name": "microlocation-name",
                    "longitude": 45,
                    "deleted-at": null,
                    "floor": 2
                },
                "type": "microlocation",
                "id": "1",
                "links": {
                    "self": "/v1/microlocations/1"
                }
            },
            "jsonapi": {
                "version": "1.0"
            },
            "links": {
                "self": "/v1/microlocations/1"
            }
        }
